{"version":3,"sources":["logo.svg","Header.js","Articles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","handleOpenLogin","stateOfwindow","stateToSet","setState","openLogin","handleLogin","handleOpenPost","openNewPost","handleTitle","e","userTitle","target","value","handleUrl","userUrl","handleDesc","userDesc","handlePost","preventDefault","title","state","url","description","axios","method","responseType","data","likes","comments","then","response","props","getArticlesFunc","className","onClick","this","action","onSubmit","htmlFor","type","name","id","onChange","cols","rows","Component","Articles","articleData","map","article","key","_id","href","date","App","getArticles","articleResponse","articles","isLoggedIn","loggedIn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8076c373.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            openLogin: false,\r\n            openNewPost: false,\r\n            userTitle: '',\r\n            userUrl: '',\r\n            userDesc: '',\r\n        }\r\n    }\r\n\r\n    // LOGIN FUNCTIONS\r\n\r\n    // on click, change the state in parent to true\r\n    handleOpenLogin = (stateOfwindow) => {\r\n        // call function from parent to open the module window\r\n        // this.props.showLoginFunc(true);\r\n\r\n        const stateToSet = stateOfwindow;\r\n\r\n        this.setState({\r\n            openLogin: stateToSet,\r\n        })\r\n    }\r\n\r\n    // on submit, post to the API and close the window\r\n    handleLogin = ()=>{\r\n\r\n        // call function to close the module window\r\n        this.handleOpenLogin(false);\r\n\r\n    }\r\n\r\n    // on click, change the state in parent to true\r\n    handleOpenPost = (stateOfwindow) => {\r\n\r\n        // call function to open the module window\r\n        const stateToSet = stateOfwindow;\r\n\r\n        this.setState({\r\n            openNewPost: stateToSet,\r\n        })\r\n    }\r\n\r\n    // NEW POST FUNCTIONS\r\n\r\n    // on change, grab the title\r\n    handleTitle = (e)=>{\r\n        this.setState({\r\n            userTitle: e.target.value,\r\n        })\r\n    }\r\n\r\n    // on change, grab the url\r\n    handleUrl = (e)=>{\r\n        this.setState({\r\n            userUrl: e.target.value,\r\n        })\r\n    }\r\n\r\n    // on change, grab the description\r\n    handleDesc = (e)=>{\r\n\r\n        this.setState({\r\n            userDesc: e.target.value,\r\n        })\r\n    }\r\n\r\n    // on submit, post to the API and close the window\r\n    handlePost = (e)=>{\r\n\r\n        // prevent default of the post\r\n        e.preventDefault();\r\n\r\n        // make variables \r\n        const title = this.state.userTitle;\r\n        const url = this.state.userUrl;\r\n        const description = this.state.userDesc;\r\n        // const date = new Date();\r\n        const likes = 0;\r\n        const comments = [];\r\n\r\n        // post the data to the api an recieve updated data\r\n        axios({\r\n            url: '/article',\r\n            method: 'POST',\r\n            responseType: 'json',\r\n            data: {\r\n                title,\r\n                url,\r\n                description,\r\n                likes,\r\n                comments,\r\n            }\r\n        })\r\n        .then((response) => {\r\n            this.props.getArticlesFunc();\r\n        })\r\n\r\n\r\n\r\n        // call function to close the module window\r\n        this.handleOpenPost(false);\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <header>\r\n                <div className=\"wrapper\">\r\n                    <h1>Minty news</h1>\r\n                    <nav>\r\n                        <ul>\r\n                            <li className=\"newPost\"><button onClick = {()=>this.handleOpenPost(true)}>+ New post</button></li>\r\n                            <li className=\"login\"><button onClick = {()=>this.handleOpenLogin(true)}>Login</button></li>\r\n                        </ul>\r\n                    </nav>\r\n                    {this.state.openNewPost ? <div className=\"newPost moduleContainer\">\r\n                        <div className=\"moduleContent\">\r\n                            <h3>Make a new post</h3>\r\n                            <form action=\"\" onSubmit = {this.handlePost}>\r\n                                <label htmlFor=\"title\">Title</label>\r\n                                <input type=\"text\" name=\"title\" id=\"title\" onChange ={this.handleTitle}/>\r\n        \r\n                                <label htmlFor=\"link\">URL</label>\r\n                                <input type=\"text\" name=\"link\" id=\"link\" onChange ={this.handleUrl}/>\r\n        \r\n                                <label htmlFor=\"description\">Description</label>\r\n                                <textarea name=\"description\" id=\"description\" cols=\"30\" rows=\"10\" onChange ={this.handleDesc}></textarea>\r\n        \r\n                                <button type=\"submit\">Post</button>\r\n                            </form>\r\n                        </div>\r\n                    </div> : null}\r\n                    \r\n                    {this.state.openLogin ? <div className=\"login moduleContainer\">\r\n                        <div className=\"moduleContent\">\r\n                            <h3>Login</h3>\r\n                            <form action=\"\" onSubmit = {this.handleLogin}>\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <input type=\"text\" name=\"username\" id=\"username\"/>\r\n        \r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input type=\"password\" name=\"password\" id=\"password\"/>\r\n        \r\n                                <button type=\"submit\">Log in</button>\r\n                            </form>\r\n                        </div>\r\n                    </div> : null}\r\n                </div>    \r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\n\r\n\r\nclass Articles extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getArticlesFunc();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <main>\r\n                <div className=\"wrapper\">\r\n                    <ul>\r\n                        {this.props.articleData.map((article)=>{\r\n                            return(\r\n                                <li key={article._id}>\r\n                                    <button>Like</button>\r\n                                    <h2><a href={article.url}>{article.title}</a></h2>\r\n                                    <p>{article.description}</p>\r\n                                    <p>{article.likes}</p>\r\n                                    <p>{article.date}</p>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Articles;","import React, {Component} from 'react';\r\nimport Header from './Header';\r\nimport axios from 'axios';\r\nimport Articles from './Articles';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      articles: [],\r\n    }\r\n\r\n\r\n  }\r\n\r\n  // make function to recieve the articles data\r\n  getArticles = () => {\r\n    axios({\r\n        url: '/articles',\r\n        method: 'GET',\r\n        responseType: 'json',\r\n    })\r\n    .then((response) => {\r\n        const articleResponse = response.data;\r\n\r\n      // set state to the response from the API\r\n        this.setState({\r\n        articles: articleResponse,\r\n        })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <Header  loggedIn = {this.state.openLogin} getArticlesFunc = {this.getArticles}/>\r\n        <Articles getArticlesFunc = {this.getArticles} articleData = {this.state.articles}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}