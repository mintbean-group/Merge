{"version":3,"sources":["Header.js","Articles.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleOpenLogin","stateOfwindow","stateToSet","setState","openLogin","handleLogin","handleOpenPost","openNewPost","handleTitle","e","userTitle","target","value","handleUrl","userUrl","handleDesc","userDesc","handleLogout","console","log","window","location","handlePost","preventDefault","title","state","url","description","axios","method","responseType","data","likes","comments","then","response","props","getArticlesFunc","catch","error","className","onClick","loggedIn","this","src","userObject","picture","alt","name","icon","faTimes","action","onSubmit","htmlFor","type","id","onChange","required","pattern","placeholder","cols","rows","Component","Articles","handleComments","commentSection","currentTarget","nextElementSibling","classList","toggle","length","document","addEventListener","contains","remove","handleGetArticle","articleData","filter","article","_id","handleUserComment","userComment","handleNewComment","newComment","comment","getElementById","push","updateArticlesFunc","handleLikes","button","indexOf","split","map","key","faCaretUp","href","rel","date","faUserCircle","faPlus","App","componentDidMount","user","status","isLoggedIn","updateArticles","getArticles","articleResponse","articles","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"ySA2PeA,E,kDAlPb,aAAe,IAAD,8BACZ,gBAcFC,gBAAkB,SAACC,GAIjB,IAAMC,EAAaD,EAEnB,EAAKE,SAAS,CACZC,UAAWF,KAtBD,EA2BdG,YAAc,WAEZ,EAAKL,iBAAgB,IA7BT,EAiCdM,eAAiB,SAACL,GAEhB,IAAMC,EAAaD,EAEnB,EAAKE,SAAS,CACZI,YAAaL,KAtCH,EA6CdM,YAAc,SAACC,GACb,EAAKN,SAAS,CACZO,UAAWD,EAAEE,OAAOC,SA/CV,EAoDdC,UAAY,SAACJ,GACX,EAAKN,SAAS,CACZW,QAASL,EAAEE,OAAOC,SAtDR,EA2DdG,WAAa,SAACN,GACZ,EAAKN,SAAS,CACZa,SAAUP,EAAEE,OAAOC,SA7DT,EAkEdK,aAAe,WACbC,QAAQC,IAAI,wBACXC,OAAOC,SAAW,wCApEP,EA0EdC,WAAa,SAACb,GAEZA,EAAEc,iBAGF,IAAMC,EAAQ,EAAKC,MAAMf,UACnBgB,EAAM,EAAKD,MAAMX,QACjBa,EAAc,EAAKF,MAAMT,SAM/BY,IAAM,CACJF,IAAI,GAAD,OA3FS,GA2FT,YACHG,OAAQ,OACRC,aAAc,OACdC,KAAM,CACJP,QACAE,MACAC,cACAK,MAZU,EAaVC,SAZa,MAedC,MAAK,SAACC,GACL,EAAKC,MAAMC,qBAEZC,OAAM,SAACC,GACwB,qBAAnBA,EAAMJ,WACff,OAAOC,SAAW,0CAKxB,EAAKf,gBAAe,IA1GpB,EAAKmB,MAAQ,CACXrB,WAAW,EACXG,aAAa,EACbG,UAAW,GACXI,QAAS,GACTE,SAAU,IARA,E,qDAgHJ,IAAD,OACP,OACE,gCACE,yBAAKwB,UAAU,WACb,0CAEA,6BACE,4BACE,4BACE,4BACEA,UAAU,gBACVC,QAAS,kBACP,EAAKL,MAAMM,SACP,EAAKpC,gBAAe,GACnBc,OAAOC,SACN,wCANV,eAYDsB,KAAKP,MAAMM,SACV,yBAAKF,UAAU,UACb,yBAAKA,UAAU,WACb,yBACEI,IAAKD,KAAKP,MAAMS,WAAWC,QAC3BC,IAAKJ,KAAKP,MAAMS,WAAWG,OAE7B,qCAAWL,KAAKP,MAAMS,WAAWG,OAGnC,4BACE,4BAAQR,UAAU,cAAcC,QAASE,KAAK1B,cAA9C,cAMJ,4BACE,4BACEuB,UAAU,cACVC,QAAS,kBACNrB,OAAOC,SAAW,wCAHvB,YAYPsB,KAAKlB,MAAMlB,YACV,yBAAKiC,UAAU,2BACb,yBAAKA,UAAU,iBACb,4BACEC,QAAS,kBAAM,EAAKnC,gBAAe,IACnCkC,UAAU,eAEV,kBAAC,IAAD,CAAiBS,KAAMC,OAEzB,+CACA,0BAAMC,OAAO,GAAGC,SAAUT,KAAKrB,YAC7B,2BAAO+B,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLN,KAAK,QACLO,GAAG,QACHC,SAAUb,KAAKnC,YACfiD,UAAQ,IAGV,2BAAOJ,QAAQ,QAAf,6BACA,2BACEC,KAAK,OACLN,KAAK,OACLO,GAAG,OACHC,SAAUb,KAAK9B,UACf4C,UAAQ,EACRC,QAAQ,cACRC,YAAY,2BAGd,2BAAON,QAAQ,eAAf,eACA,8BACEL,KAAK,cACLO,GAAG,cACHK,KAAK,KACLC,KAAK,KACLL,SAAUb,KAAK5B,WACf0C,UAAQ,IAGV,4BAAQH,KAAK,SAASd,UAAU,UAAhC,WAMJ,KAEHG,KAAKlB,MAAMrB,UACV,yBAAKoC,UAAU,yBACb,yBAAKA,UAAU,iBACb,4BACEC,QAAS,kBAAM,EAAKzC,iBAAgB,IACpCwC,UAAU,eAEV,kBAAC,IAAD,CAAiBS,KAAMC,OAEzB,qCACA,0BAAMC,OAAO,GAAGC,SAAUT,KAAKtC,aAC7B,2BAAOgD,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAON,KAAK,WAAWO,GAAG,aAEtC,2BAAOF,QAAQ,YAAf,YACA,2BAAOC,KAAK,WAAWN,KAAK,WAAWO,GAAG,aAE1C,4BAAQD,KAAK,SAASd,UAAU,UAAhC,YAMJ,W,GA5OOsB,aC0MNC,E,kDA1MX,aAAc,IAAD,8BACT,gBAeJC,eAAiB,SAACvD,GACd,IAAMwD,EAAiBxD,EAAEyD,cAAcC,mBAEvCF,EAAeG,UAAUC,OAAO,UAEO,IAApCJ,EAAeG,UAAUE,QAExBC,SAASC,iBAAiB,aAAa,SAAC/D,GAGhCA,EAAEE,OAAOyD,UAAUK,SAAS,iBAC5BR,EAAeG,UAAUM,OAAO,cA3BnC,EAkCbC,iBAAmB,SAACpB,GAMhB,OAJwB,EAAKnB,MAAMwC,YAAYC,QAAO,SAACC,GACnD,OAAOA,EAAQC,MAAQxB,KAGJ,IAxCd,EA4CbyB,kBAAoB,SAACvE,GACjB,EAAKN,SAAS,CACV8E,YAAaxE,EAAEE,OAAOC,SA9CjB,EAmDbsE,iBAAmB,SAAC3B,GAGhB,IAAMuB,EAAU,EAAKH,iBAAiBpB,GAGhC4B,EAAa,CACfC,QAAS,EAAK3D,MAAMwD,aAGxBV,SAASc,eAAe,cAAczE,MAAQ,GAE9CgB,IAAM,CACJF,IAAI,GAAD,OAnEK,GAmEL,YACHG,OAAQ,OACRC,aAAc,OACdC,KAAMoD,IAELjD,MAAK,SAACC,GACLgD,EAAW5B,GAAKpB,EAASJ,KAAKwB,GAG9BuB,EAAQ7C,SAASqD,KAAKH,EAAW5B,IAGjC,EAAKnB,MAAMmD,mBAAmBT,MAE/BxC,OAAM,SAACC,GACwB,qBAAnBA,EAAMJ,WACff,OAAOC,SAAW,2CAhFf,EAsFbmE,YAAc,SAAC/E,EAAG8C,GAId,IAAMkC,EAAShF,EAAEyD,cAQjB,GALAuB,EAAOrB,UAAUC,OAAO,SAExBnD,QAAQC,IAAIsE,EAAOrB,WAGY,IAA5BqB,EAAOrB,UAAUE,OAAa,CAG7B,IAAMQ,EAAU,EAAKH,iBAAiBpB,GAGtCuB,EAAQ9C,QAGR,EAAKI,MAAMmD,mBAAmBT,QAE3B,GAA+B,IAA5BW,EAAOrB,UAAUE,OAAa,CAEpC,IAAMQ,EAAU,EAAKH,iBAAiBpB,GAGtCuB,EAAQ9C,QAGR,EAAKI,MAAMmD,mBAAmBT,KArHzB,EA6HbjE,UAAY,SAACa,GAgBT,OAZIA,EAAIgE,QAAQ,OAAS,EACVhE,EAAIiE,MAAM,KAAK,GAGfjE,EAAIiE,MAAM,KAAK,IAIVA,MAAM,KAAK,GAEXA,MAAM,KAAK,IAxI/B,EAAKlE,MAAQ,CACTwD,YAAa,IAJR,E,gEAUTtC,KAAKP,MAAMC,oB,+BAsIN,IAAD,OAGJ,OACI,8BACI,yBAAKG,UAAU,WACX,4BAEKG,KAAKP,MAAMwC,YAAYgB,KAAI,SAACd,GACzB,OACI,wBAAIe,IAAKf,EAAQC,IAAKvC,UAAU,WAC5B,yBAAKA,UAAU,gBACX,4BAAQC,QAAW,SAAChC,GAAD,OAAK,EAAK+E,YAAY/E,EAAGqE,EAAQC,OAChD,kBAAC,IAAD,CAAiB9B,KAAM6C,OAE3B,uBAAGtD,UAAU,SAASsC,EAAQ9C,QAElC,yBAAKQ,UAAU,eACX,yBAAKA,UAAU,eACX,4BAAI,uBAAGuD,KAAMjB,EAAQpD,IAAKf,OAAO,SAASqF,IAAI,uBAAuBlB,EAAQtD,QAC7E,2BAAG,uBAAGuE,KAAMjB,EAAQpD,IAAKf,OAAO,SAASqF,IAAI,uBAA1C,IAAkE,EAAKnF,UAAUiE,EAAQpD,KAAzF,OAEP,uBAAGc,UAAU,eAAesC,EAAQnD,aACpC,uBAAGa,UAAU,QAAQsC,EAAQmB,MAE7B,4BAAQzD,UAAU,4BAA4BC,QAAS,SAAChC,GAAD,OAAK,EAAKuD,eAAevD,KAAKqE,EAAQ7C,SAASqC,OAAtG,eACA,yBAAK9B,UAAU,yBAEkB,IAA5BsC,EAAQ7C,SAASqC,OAAe,uBAAG9B,UAAU,0BAAb,eACjC,wBAAIA,UAAU,iCACTsC,EAAQ7C,SAAS2D,KAAI,SAACR,GACnB,OACI,wBAAIS,IAAKT,EAAQL,IAAKvC,UAAU,wBAC5B,kBAAC,IAAD,CAAiBS,KAAMiD,IAAe1D,UAAU,iBAChD,uBAAGA,UAAU,gBAAgB4C,EAAQA,cAOrD,yBAAK5C,UAAU,2BACX,2BAAOa,QAASyB,EAAQC,IAAKvC,UAAU,wBAAvC,0BACA,2BAAOgB,SAAU,EAAKwB,kBAAmB1B,KAAK,OAAON,KAAK,aAAaO,GAAIuB,EAAQC,IAAKvC,UAAU,iBAClG,4BAAQC,QAAS,kBAAI,EAAKyC,iBAAiBJ,EAAQC,MAAMvC,UAAU,gBAAe,kBAAC,IAAD,CAAiBS,KAAMkD,IAAQ3D,UAAU,gC,GA7LpJsB,aCuFRsC,E,kDArFb,aAAe,IAAD,8BACZ,gBAYFC,kBAAoB,WAClBzE,IAAM,CACJF,IAAI,GAAD,OAlBS,GAkBT,UACHG,OAAQ,MACRC,aAAc,SACbI,MAAK,SAACC,GACPjB,QAAQC,IAAI,qBACZD,QAAQC,IAAI,OAAQgB,EAASJ,KAAKuE,MAClCpF,QAAQC,IAAI,YAAagB,EAASJ,KAAKwE,QAEvC,EAAKpG,SACH,CACEqG,WAAYrE,EAASJ,KAAKwE,SAE5B,kBACEpE,EAASJ,KAAKuE,KAAO,EAAKnG,SAAS,CAAEmG,KAAMnE,EAASJ,KAAKuE,OAAU,UA5B7D,EAkCdG,eAAiB,SAAC3B,GAChBlD,IAAM,CACJF,IAAI,GAAD,OAvCS,GAuCT,oBAA0BoD,EAAQC,KACrClD,OAAQ,MACRC,aAAc,OACdC,KAAM+C,IAEL5C,MAAK,SAACC,GACL,EAAKuE,iBAENpE,OAAM,SAACC,GACwB,qBAAnBA,EAAMJ,WACff,OAAOC,SAAW,2CA9CZ,EAoDdqF,YAAc,WACZ9E,IAAM,CACJF,IAAI,GAAD,OAzDS,GAyDT,aACHG,OAAQ,MACRC,aAAc,SACbI,MAAK,SAACC,GACP,IAAMwE,EAAkBxE,EAASJ,KAEjC,EAAK5B,SAAS,CACZyG,SAAUD,QA1Dd,EAAKlF,MAAQ,CACX+E,YAAY,EACZI,SAAU,GACVN,KAAM,CACJtD,KAAM,MACNF,QAAS,wFARD,E,qDAmEZ,OACE,6BACE,kBAAC,EAAD,CACEJ,SAAUC,KAAKlB,MAAM+E,WACrBnE,gBAAiBM,KAAK+D,YACtB7D,WAAYF,KAAKlB,MAAM6E,OAEzB,kBAAC,EAAD,CACEf,mBAAoB5C,KAAK8D,eACzBpE,gBAAiBM,KAAK+D,YACtB9B,YAAajC,KAAKlB,MAAMmF,SACxB/D,WAAYF,KAAKlB,MAAM6E,Y,GA/EfxC,aCIE+C,QACW,cAA7BzF,OAAOC,SAASyF,UAEe,UAA7B1F,OAAOC,SAASyF,UAEhB1F,OAAOC,SAASyF,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAASc,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBnF,MAAK,SAAAoF,GACJA,EAAaC,gBAEdjF,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMiF,c","file":"static/js/main.4c7194d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst urlString = \"\";\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      openLogin: false,\r\n      openNewPost: false,\r\n      userTitle: \"\",\r\n      userUrl: \"\",\r\n      userDesc: \"\",\r\n    };\r\n  }\r\n\r\n  // LOGIN FUNCTIONS\r\n\r\n  // on click, change the state in parent to true\r\n  handleOpenLogin = (stateOfwindow) => {\r\n    // call function from parent to open the module window\r\n    // this.props.showLoginFunc(true);\r\n\r\n    const stateToSet = stateOfwindow;\r\n\r\n    this.setState({\r\n      openLogin: stateToSet,\r\n    });\r\n  };\r\n\r\n  // on submit, post to the API and close the window\r\n  handleLogin = () => {\r\n    // call function to close the module window\r\n    this.handleOpenLogin(false);\r\n  };\r\n\r\n  // on click, change the state in parent to true\r\n  handleOpenPost = (stateOfwindow) => {\r\n    // call function to open the module window\r\n    const stateToSet = stateOfwindow;\r\n\r\n    this.setState({\r\n      openNewPost: stateToSet,\r\n    });\r\n  };\r\n\r\n  // NEW POST FUNCTIONS\r\n\r\n  // on change, grab the title\r\n  handleTitle = (e) => {\r\n    this.setState({\r\n      userTitle: e.target.value,\r\n    });\r\n  };\r\n\r\n  // on change, grab the url\r\n  handleUrl = (e) => {\r\n    this.setState({\r\n      userUrl: e.target.value,\r\n    });\r\n  };\r\n\r\n  // on change, grab the description\r\n  handleDesc = (e) => {\r\n    this.setState({\r\n      userDesc: e.target.value,\r\n    });\r\n  };\r\n\r\n  // on lgout, redirects to Auth0 logout route\r\n  handleLogout = () => {\r\n    console.log(\"handleLogout called!\")\r\n     window.location = \"https://t4minty.herokuapp.com/logout\";\r\n    // window.location =\r\n    //   \"https://dev-rk3u8fpc.auth0.com/v2/logout?federated?returnTo=https://t4minty.herokuapp.com\";\r\n  };\r\n\r\n  // on submit, post to the API and close the window\r\n  handlePost = (e) => {\r\n    // prevent default of the post\r\n    e.preventDefault();\r\n\r\n    // make variables\r\n    const title = this.state.userTitle;\r\n    const url = this.state.userUrl;\r\n    const description = this.state.userDesc;\r\n    // const date = new Date();\r\n    const likes = 0;\r\n    const comments = [];\r\n\r\n    // post the data to the api an recieve updated data\r\n    axios({\r\n      url: `${urlString}/article`,\r\n      method: \"POST\",\r\n      responseType: \"json\",\r\n      data: {\r\n        title,\r\n        url,\r\n        description,\r\n        likes,\r\n        comments,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        this.props.getArticlesFunc();\r\n      })\r\n      .catch((error) => {\r\n        if (typeof error.response === \"undefined\") {\r\n          window.location = \"https://t4minty.herokuapp.com/login\";\r\n        }\r\n      });\r\n\r\n    // call function to close the module window\r\n    this.handleOpenPost(false);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"wrapper\">\r\n          <h1>Minty news</h1>\r\n\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  className=\"newPostButton\"\r\n                  onClick={() =>\r\n                    this.props.loggedIn\r\n                      ? this.handleOpenPost(true)\r\n                      : (window.location =\r\n                          \"https://t4minty.herokuapp.com/login\")}\r\n                >\r\n                  + New post\r\n                </button>\r\n              </li>\r\n\r\n              {this.props.loggedIn ? (\r\n                <div className=\"signIn\">\r\n                  <div className=\"profile\">\r\n                    <img\r\n                      src={this.props.userObject.picture}\r\n                      alt={this.props.userObject.name}\r\n                    />\r\n                    <p>Hello, {this.props.userObject.name}</p>\r\n                  </div>\r\n\r\n                  <li>\r\n                    <button className=\"loginButton\" onClick={this.handleLogout}>\r\n                      Sign out\r\n                    </button>\r\n                  </li>\r\n                </div>\r\n              ) : (\r\n                <li>\r\n                  <button\r\n                    className=\"loginButton\"\r\n                    onClick={() =>\r\n                      (window.location = \"https://t4minty.herokuapp.com/login\")\r\n                    }\r\n                  >\r\n                    Login\r\n                  </button>\r\n                </li>\r\n              )}\r\n            </ul>\r\n          </nav>\r\n          {this.state.openNewPost ? (\r\n            <div className=\"newPost moduleContainer\">\r\n              <div className=\"moduleContent\">\r\n                <button\r\n                  onClick={() => this.handleOpenPost(false)}\r\n                  className=\"closeModule\"\r\n                >\r\n                  <FontAwesomeIcon icon={faTimes} />\r\n                </button>\r\n                <h3>Make a new post</h3>\r\n                <form action=\"\" onSubmit={this.handlePost}>\r\n                  <label htmlFor=\"title\">Title</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    id=\"title\"\r\n                    onChange={this.handleTitle}\r\n                    required\r\n                  />\r\n\r\n                  <label htmlFor=\"link\">URL (start with https://)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"link\"\r\n                    id=\"link\"\r\n                    onChange={this.handleUrl}\r\n                    required\r\n                    pattern=\"https?://.+\"\r\n                    placeholder=\"eg. https://google.com\"\r\n                  />\r\n\r\n                  <label htmlFor=\"description\">Description</label>\r\n                  <textarea\r\n                    name=\"description\"\r\n                    id=\"description\"\r\n                    cols=\"30\"\r\n                    rows=\"10\"\r\n                    onChange={this.handleDesc}\r\n                    required\r\n                  ></textarea>\r\n\r\n                  <button type=\"submit\" className=\"submit\">\r\n                    Post\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n\r\n          {this.state.openLogin ? (\r\n            <div className=\"login moduleContainer\">\r\n              <div className=\"moduleContent\">\r\n                <button\r\n                  onClick={() => this.handleOpenLogin(false)}\r\n                  className=\"closeModule\"\r\n                >\r\n                  <FontAwesomeIcon icon={faTimes} />\r\n                </button>\r\n                <h3>Login</h3>\r\n                <form action=\"\" onSubmit={this.handleLogin}>\r\n                  <label htmlFor=\"username\">Username</label>\r\n                  <input type=\"text\" name=\"username\" id=\"username\" />\r\n\r\n                  <label htmlFor=\"password\">Password</label>\r\n                  <input type=\"password\" name=\"password\" id=\"password\" />\r\n\r\n                  <button type=\"submit\" className=\"submit\">\r\n                    Login\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretUp, faUserCircle, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst urlString = \"\";\r\n\r\nclass Articles extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            userComment: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // get articles on load\r\n        this.props.getArticlesFunc();        \r\n    }\r\n\r\n\r\n\r\n    // make function that handles the comments button\r\n    handleComments = (e) =>{\r\n        const commentSection = e.currentTarget.nextElementSibling;\r\n\r\n        commentSection.classList.toggle('opened');\r\n\r\n        if(commentSection.classList.length === 3){\r\n            // listen for click to close comments\r\n            document.addEventListener('mousedown', (e) =>{\r\n\r\n                // console.log(e.target.classList);\r\n                if(!e.target.classList.contains('clickComment')){\r\n                    commentSection.classList.remove('opened');\r\n                } \r\n            })\r\n        } \r\n    }\r\n\r\n    // make function to grab the specific article\r\n    handleGetArticle = (id)=>{\r\n        // grab the specific article and store in the article\r\n        const specificArticle = this.props.articleData.filter((article)=>{\r\n            return article._id === id;\r\n        })\r\n\r\n        return specificArticle[0];\r\n    }\r\n\r\n    // make function to bind input to state\r\n    handleUserComment = (e)=>{\r\n        this.setState({\r\n            userComment: e.target.value,\r\n        })\r\n    }\r\n    \r\n    // make function to add new comment\r\n    handleNewComment = (id) => {\r\n\r\n        // call function to grab the article\r\n        const article = this.handleGetArticle(id);\r\n\r\n        // make comment object\r\n        const newComment = {\r\n            comment: this.state.userComment,\r\n        }\r\n\r\n        document.getElementById('newComment').value = '';\r\n\r\n        axios({\r\n          url: `${urlString}/comment`,\r\n          method: \"POST\",\r\n          responseType: \"json\",\r\n          data: newComment,\r\n        })\r\n          .then((response) => {\r\n            newComment.id = response.data.id;\r\n\r\n            // push article to array\r\n            article.comments.push(newComment.id);\r\n\r\n            // update the api\r\n            this.props.updateArticlesFunc(article);\r\n          })\r\n          .catch((error) => {\r\n            if (typeof error.response === \"undefined\") {\r\n              window.location = \"https://t4minty.herokuapp.com/login\";\r\n            }\r\n          });                \r\n    }\r\n    \r\n    // make function that handles the likes\r\n    handleLikes = (e, id)=>{\r\n\r\n\r\n        // make variable for the button being selected\r\n        const button = e.currentTarget;\r\n\r\n        // only add class for those that are liked\r\n        button.classList.toggle('liked');\r\n\r\n        console.log(button.classList);\r\n\r\n        \r\n        if(button.classList.length === 1){\r\n\r\n            // call function to grab the specific article\r\n            const article = this.handleGetArticle(id);\r\n    \r\n            // increase the likes by one\r\n            article.likes++;\r\n    \r\n            // update the api\r\n            this.props.updateArticlesFunc(article);\r\n\r\n        } else if(button.classList.length === 0){\r\n            // call function to grab the specific article\r\n            const article = this.handleGetArticle(id);\r\n    \r\n            // increase the likes by one\r\n            article.likes--;\r\n    \r\n            // update the api\r\n            this.props.updateArticlesFunc(article);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    // make function that converts the url\r\n    handleUrl = (url) =>{\r\n        let hostname;\r\n        //find & remove protocol (http, ftp, etc.) and get hostname\r\n    \r\n        if (url.indexOf(\"//\") > -1) {\r\n            hostname = url.split('/')[2];\r\n        }\r\n        else {\r\n            hostname = url.split('/')[0];\r\n        }\r\n    \r\n        //find & remove port number\r\n        hostname = hostname.split(':')[0];\r\n        //find & remove \"?\"\r\n        hostname = hostname.split('?')[0];\r\n    \r\n        return hostname;\r\n    }\r\n\r\n    render(){\r\n\r\n        // console.log(this.props.articleData);\r\n        return(\r\n            <main>\r\n                <div className=\"wrapper\">\r\n                    <ul>\r\n                        {/* map through the articles and display them in lis */}\r\n                        {this.props.articleData.map((article)=>{\r\n                            return(\r\n                                <li key={article._id} className=\"article\">\r\n                                    <div className=\"likesSection\">\r\n                                        <button onClick = {(e)=>this.handleLikes(e, article._id)}>\r\n                                            <FontAwesomeIcon icon={faCaretUp} />\r\n                                        </button>\r\n                                        <p className=\"likes\">{article.likes}</p>\r\n                                    </div>\r\n                                    <div className=\"articleInfo\">\r\n                                        <div className=\"linkHeading\">\r\n                                            <h2><a href={article.url} target=\"_blank\" rel=\"noopener noreferrer\">{article.title}</a></h2>\r\n                                            <p><a href={article.url} target='_blank' rel=\"noopener noreferrer\">({this.handleUrl(article.url)})</a></p>\r\n                                        </div>\r\n                                        <p className=\"description\">{article.description}</p>\r\n                                        <p className=\"date\">{article.date}</p>\r\n                                        {/* add button to show and hide the comments */}\r\n                                        <button className=\"showComments clickComment\" onClick={(e)=>this.handleComments(e)}>{article.comments.length} comment(s)</button>\r\n                                        <div className=\"comments clickComment\">\r\n                                            {/* check if the comments are empty, if they arent map through them and display */}\r\n                                            {article.comments.length === 0 ? <p className=\"noComment clickComment\">No comments</p> : \r\n                                            <ul className=\"commentContainer clickComment\">\r\n                                                {article.comments.map((comment)=>{\r\n                                                    return(\r\n                                                        <li key={comment._id} className=\"clickComment comment\">\r\n                                                            <FontAwesomeIcon icon={faUserCircle}  className=\"clickComment\"/>\r\n                                                            <p className=\"clickComment\">{comment.comment}</p>\r\n                                                        </li>\r\n                                                    )\r\n                                                })}\r\n                                            </ul>\r\n                                            }\r\n                                            {/* form for new comments */}\r\n                                            <div className=\"newComment clickComment\">\r\n                                                <label htmlFor={article._id} className=\"sr-only clickComment\">Please enter a comment</label>\r\n                                                <input onChange={this.handleUserComment} type=\"text\" name=\"newComment\" id={article._id} className=\"clickComment\" />\r\n                                                <button onClick={()=>this.handleNewComment(article._id)} className=\"clickComment\"><FontAwesomeIcon icon={faPlus} className=\"clickComment\"/></button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Articles;","import React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport Articles from \"./Articles\";\r\nimport \"./App.css\";\r\n\r\nconst urlString = \"\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      articles: [],\r\n      user: {\r\n        name: 'Kay',\r\n        picture: 'https://lh3.googleusercontent.com/a-/AOh14GinaUIVVR9aQc6qz8Mg1Sl7wFeDMnJTzBzDDrtLjg'\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    axios({\r\n      url: `${urlString}/check`,\r\n      method: \"GET\",\r\n      responseType: \"json\",\r\n    }).then((response) => {\r\n      console.log(\"component mounted\");\r\n      console.log(\"user\", response.data.user);\r\n      console.log(\"loggedIN?\", response.data.status);\r\n\r\n      this.setState(\r\n        {\r\n          isLoggedIn: response.data.status,\r\n        },\r\n        () =>\r\n          response.data.user ? this.setState({ user: response.data.user }) : \"\"\r\n      );\r\n    });\r\n  };\r\n\r\n  // make function to update articles\r\n  updateArticles = (article) => {\r\n    axios({\r\n      url: `${urlString}/article/${article._id}`,\r\n      method: \"PUT\",\r\n      responseType: \"json\",\r\n      data: article,\r\n    })\r\n      .then((response) => {\r\n        this.getArticles();\r\n      })\r\n      .catch((error) => {\r\n        if (typeof error.response === \"undefined\") {\r\n          window.location = \"https://t4minty.herokuapp.com/login\";\r\n        }\r\n      });\r\n  };\r\n\r\n  // make function to recieve the articles data\r\n  getArticles = () => {\r\n    axios({\r\n      url: `${urlString}/articles`,\r\n      method: \"GET\",\r\n      responseType: \"json\",\r\n    }).then((response) => {\r\n      const articleResponse = response.data;\r\n      // set state to the response from the API\r\n      this.setState({\r\n        articles: articleResponse,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header\r\n          loggedIn={this.state.isLoggedIn}\r\n          getArticlesFunc={this.getArticles}\r\n          userObject={this.state.user}\r\n        />\r\n        <Articles\r\n          updateArticlesFunc={this.updateArticles}\r\n          getArticlesFunc={this.getArticles}\r\n          articleData={this.state.articles}\r\n          userObject={this.state.user}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}