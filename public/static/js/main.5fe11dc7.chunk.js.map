{"version":3,"sources":["Header.js","Articles.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleOpenLogin","stateOfwindow","stateToSet","setState","openLogin","handleLogin","handleOpenPost","openNewPost","handleTitle","e","userTitle","target","value","handleUrl","userUrl","handleDesc","userDesc","handlePost","preventDefault","title","state","url","description","axios","method","responseType","data","likes","comments","then","response","props","getArticlesFunc","className","onClick","this","loggedIn","handleOpenProfile","icon","faTimes","action","onSubmit","htmlFor","type","name","id","onChange","required","cols","rows","Component","Articles","handleComments","currentTarget","nextElementSibling","classList","toggle","handleGetArticle","articleData","filter","article","_id","handleUserComment","userComment","handleNewComment","newComment","comment","document","getElementById","push","updateArticlesFunc","handleLikes","button","console","log","length","map","key","faCaretUp","href","date","userObject","picture","src","alt","faUserCircle","faPlus","App","updateArticles","getArticles","articleResponse","articles","isLoggedIn","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fe11dc7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst urlString = \"\";\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            openLogin: false,\r\n            openNewPost: false,\r\n            userTitle: '',\r\n            userUrl: '',\r\n            userDesc: '',\r\n        }\r\n    }\r\n\r\n    // LOGIN FUNCTIONS\r\n\r\n    // on click, change the state in parent to true\r\n    handleOpenLogin = (stateOfwindow) => {\r\n        // call function from parent to open the module window\r\n        // this.props.showLoginFunc(true);\r\n\r\n        const stateToSet = stateOfwindow;\r\n\r\n        this.setState({\r\n            openLogin: stateToSet,\r\n        })\r\n    }\r\n\r\n    // on submit, post to the API and close the window\r\n    handleLogin = ()=>{\r\n\r\n        // call function to close the module window\r\n        this.handleOpenLogin(false);\r\n\r\n    }\r\n\r\n    // on click, change the state in parent to true\r\n    handleOpenPost = (stateOfwindow) => {\r\n\r\n        // call function to open the module window\r\n        const stateToSet = stateOfwindow;\r\n\r\n        this.setState({\r\n            openNewPost: stateToSet,\r\n        })\r\n    }\r\n\r\n    // NEW POST FUNCTIONS\r\n\r\n    // on change, grab the title\r\n    handleTitle = (e)=>{\r\n        this.setState({\r\n            userTitle: e.target.value,\r\n        })\r\n    }\r\n\r\n    // on change, grab the url\r\n    handleUrl = (e)=>{\r\n        this.setState({\r\n            userUrl: e.target.value,\r\n        })\r\n    }\r\n\r\n    // on change, grab the description\r\n    handleDesc = (e)=>{\r\n\r\n        this.setState({\r\n            userDesc: e.target.value,\r\n        })\r\n    }\r\n\r\n    // on submit, post to the API and close the window\r\n    handlePost = (e)=>{\r\n\r\n        // prevent default of the post\r\n        e.preventDefault();\r\n\r\n        // make variables \r\n        const title = this.state.userTitle;\r\n        const url = this.state.userUrl;\r\n        const description = this.state.userDesc;\r\n        // const date = new Date();\r\n        const likes = 0;\r\n        const comments = [];\r\n\r\n        // post the data to the api an recieve updated data\r\n        axios({\r\n          url: `${urlString}/article`,\r\n          method: \"POST\",\r\n          responseType: \"json\",\r\n          data: {\r\n            title,\r\n            url,\r\n            description,\r\n            likes,\r\n            comments,\r\n          },\r\n        }).then((response) => {\r\n          this.props.getArticlesFunc();\r\n        });\r\n\r\n\r\n\r\n        // call function to close the module window\r\n        this.handleOpenPost(false);\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <header>\r\n                <div className=\"wrapper\">\r\n                    <h1>Minty news</h1>\r\n                    <nav>\r\n                        <ul>\r\n                            <li><button className=\"newPostButton\" onClick = {()=>this.handleOpenPost(true)}>+ New post</button></li>\r\n                            {this.props.loggedIn ? \r\n                            <div>\r\n                                <li><button className=\"profileButton\" onClick = {()=>this.handleOpenProfile(true)}>Profile</button></li>\r\n                                <li><button className=\"loginButton\">Sign out</button></li> \r\n                            </div> : \r\n                            <li><button className=\"loginButton\" onClick = {()=>this.handleOpenLogin(true)}>Login</button></li>\r\n                            }\r\n                        </ul>\r\n                    </nav>\r\n                    {this.state.openNewPost ? <div className=\"newPost moduleContainer\">\r\n                        <div className=\"moduleContent\">\r\n                        <button onClick={()=>this.handleOpenPost(false)} className=\"closeModule\">\r\n                                <FontAwesomeIcon icon={faTimes} />\r\n                            </button>\r\n                            <h3>Make a new post</h3>\r\n                            <form action=\"\" onSubmit = {this.handlePost}>\r\n                                <label htmlFor=\"title\">Title</label>\r\n                                <input type=\"text\" name=\"title\" id=\"title\" onChange ={this.handleTitle} required/>\r\n        \r\n                                <label htmlFor=\"link\">URL</label>\r\n                                <input type=\"text\" name=\"link\" id=\"link\" onChange ={this.handleUrl} required/>\r\n        \r\n                                <label htmlFor=\"description\">Description</label>\r\n                                <textarea name=\"description\" id=\"description\" cols=\"30\" rows=\"10\" onChange ={this.handleDesc} required></textarea>\r\n        \r\n                                <button type=\"submit\" className=\"submit\">Post</button>\r\n                            </form>\r\n                        </div>\r\n                    </div> : null}\r\n                    \r\n                    {this.state.openLogin ? <div className=\"login moduleContainer\">\r\n                        <div className=\"moduleContent\">\r\n                            <button onClick={()=>this.handleOpenLogin(false)} className=\"closeModule\">\r\n                                <FontAwesomeIcon icon={faTimes} />\r\n                            </button>\r\n                            <h3>Login</h3>\r\n                            <form action=\"\" onSubmit = {this.handleLogin}>\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <input type=\"text\" name=\"username\" id=\"username\"/>\r\n        \r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input type=\"password\" name=\"password\" id=\"password\"/>\r\n        \r\n                                <button type=\"submit\" className=\"submit\">Login</button>\r\n                            </form>\r\n                        </div>\r\n                    </div> : null}\r\n                </div>    \r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretUp, faUserCircle, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst urlString = \"\";\r\n\r\nclass Articles extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            userComment: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getArticlesFunc();\r\n    }\r\n\r\n    // make function that handles the comments button\r\n    handleComments = (e) =>{\r\n        const commentSection = e.currentTarget.nextElementSibling;\r\n\r\n        commentSection.classList.toggle('opened');\r\n    }\r\n\r\n    // make function to grab the specific article\r\n    handleGetArticle = (id)=>{\r\n        // grab the specific article and store in the article\r\n        const specificArticle = this.props.articleData.filter((article)=>{\r\n            return article._id === id;\r\n        })\r\n\r\n        return specificArticle[0];\r\n    }\r\n\r\n    // make function to bind input to state\r\n    handleUserComment = (e)=>{\r\n        this.setState({\r\n            userComment: e.target.value,\r\n        })\r\n    }\r\n    \r\n    // make function to add new comment\r\n    handleNewComment = (id) => {\r\n\r\n        // call function to grab the article\r\n        const article = this.handleGetArticle(id);\r\n\r\n        // make comment object\r\n        const newComment = {\r\n            comment: this.state.userComment,\r\n        }\r\n\r\n        document.getElementById('newComment').value = '';\r\n\r\n        axios({\r\n            url: `${urlString}/comment`,\r\n            method: 'POST',\r\n            responseType: 'json',\r\n            data: newComment,\r\n        })\r\n        .then((response) => {\r\n            newComment.id = response.data.id;\r\n\r\n            // push article to array\r\n            article.comments.push(newComment.id);\r\n    \r\n            // update the api\r\n            this.props.updateArticlesFunc(article);\r\n\r\n        })\r\n                \r\n    }\r\n    \r\n    // make function that handles the likes\r\n    handleLikes = (e, id)=>{\r\n\r\n\r\n        // make variable for the button being selected\r\n        const button = e.currentTarget;\r\n\r\n        // only add class for those that are liked\r\n        button.classList.toggle('liked');\r\n\r\n        console.log(button.classList);\r\n\r\n        \r\n        if(button.classList.length === 1){\r\n\r\n            // call function to grab the specific article\r\n            const article = this.handleGetArticle(id);\r\n    \r\n            // increase the likes by one\r\n            article.likes++;\r\n    \r\n            // update the api\r\n            this.props.updateArticlesFunc(article);\r\n\r\n        } else if(button.classList.length === 0){\r\n            // call function to grab the specific article\r\n            const article = this.handleGetArticle(id);\r\n    \r\n            // increase the likes by one\r\n            article.likes--;\r\n    \r\n            // update the api\r\n            this.props.updateArticlesFunc(article);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        // console.log(this.props.articleData);\r\n        return(\r\n            <main>\r\n                <div className=\"wrapper\">\r\n                    <ul>\r\n                        {/* map through the articles and display them in lis */}\r\n                        {this.props.articleData.map((article)=>{\r\n                            return(\r\n                                <li key={article._id} className=\"article\">\r\n                                    <div className=\"likesSection\">\r\n                                        <button onClick = {(e)=>this.handleLikes(e, article._id)}>\r\n                                            <FontAwesomeIcon icon={faCaretUp} />\r\n                                        </button>\r\n                                        <p className=\"likes\">{article.likes}</p>\r\n                                    </div>\r\n                                    <div className=\"articleInfo\">\r\n                                        <h2><a href={article.url}>{article.title}</a></h2>\r\n                                        <p className=\"description\">{article.description}</p>\r\n                                        <p className=\"date\">{article.date}</p>\r\n                                        {/* add button to show and hide the comments */}\r\n                                        <button className=\"showComments\" onClick={(e)=>this.handleComments(e)}>{article.comments.length} comment(s)</button>\r\n                                        <div className=\"comments\">\r\n                                            {/* check if the comments are empty, if they arent map through them and display */}\r\n                                            {article.comments.length === 0 ? <p className=\"noComment\">No comments</p> : \r\n                                            <ul className=\"commentContainer\">\r\n                                                {article.comments.map((comment)=>{\r\n                                                    return(\r\n                                                        <li key={comment._id} className=\"comment\">\r\n                                                            {this.props.userObject.picture ? <img src={this.props.userObject.picture} alt={this.props.userObject.name}/> : \r\n                                                            <FontAwesomeIcon icon={faUserCircle} />\r\n                                                            }\r\n                                                            <p>{comment.comment}</p>\r\n                                                        </li>\r\n                                                    )\r\n                                                })}\r\n                                            </ul>\r\n                                            }\r\n                                            {/* form for new comments */}\r\n                                            <div className=\"newComment\">\r\n                                                <label htmlFor=\"newComment\" className=\"sr-only\">Please enter a comment</label>\r\n                                                <input onChange={this.handleUserComment} type=\"text\" name=\"newComment\" id=\"newComment\"/>\r\n                                                <button onClick={()=>this.handleNewComment(article._id)}><FontAwesomeIcon icon={faPlus} /></button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Articles;","import React, {Component} from 'react';\r\nimport Header from './Header';\r\nimport axios from 'axios';\r\nimport Articles from './Articles';\r\nimport './App.css';\r\n\r\nconst urlString = \"\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      articles: [],\r\n      user: {},\r\n    }\r\n  }\r\n\r\n  // make function to update articles\r\n  updateArticles = (article) => {\r\n    axios({\r\n      url: `${urlString}/article/${article._id}`,\r\n      method: \"PUT\",\r\n      responseType: \"json\",\r\n      data: article,\r\n    }).then((response) => {\r\n      this.getArticles();\r\n    });\r\n  }\r\n\r\n  // make function to recieve the articles data\r\n  getArticles = () => {\r\n    axios({\r\n      url: `${urlString}/articles`,\r\n      method: \"GET\",\r\n      responseType: \"json\",\r\n    }).then((response) => {\r\n      const articleResponse = response.data;\r\n      console.log(articleResponse);\r\n\r\n      // set state to the response from the API\r\n      this.setState({\r\n        articles: articleResponse,\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <Header  loggedIn = {this.state.isLoggedIn} getArticlesFunc = {this.getArticles}/>\r\n        <Articles updateArticlesFunc = {this.updateArticles} getArticlesFunc = {this.getArticles} articleData = {this.state.articles} userObject = {this.state.user}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}